global _start

% simple calculator example
fn _start() {
    % read left side and convert to integer ('0's code is 48)
    let x = readc() - 48
    printc(' ')
    % read operation
    let op = readc()
    printc(' ')
    % read right side
    let y = readc() - 48
    print(" = ")
    % plus operation
    cmp op, 43 {
        eq {
            printi(x + y)
            return 0
        }
    }
    % minus operation
    cmp op, 45 {
        eq {
            printi(x - y)
            return 0
        }
    }
    % multiply operation
    cmp op, 42 {
        eq {
            printi(x * y)
            return 0
        }
    }
    % divide operation
    cmp op, 47 {
        eq {
            printi(x / y)
            return 0
        }
    }
    % if all other cases fail
    print("\nInvalid Operation!!")
	return 1
}

~
==========================
STANDARD LIBRARY FUNCTIONS
==========================
~

~
printc function
args:
    the character (stored in rdi)
usage example:
    printc('V')
~
fn printc() {
    asm "mov rdx, 1"
    asm "mov rsi, rdi"
    asm "mov rax, 1"
    asm "mov rdi, 1"
    asm "syscall"
}
~
print function
args:
    the pointer to the string (stored in rdi)
usage example:
    print("Hello World!")
~
fn print() {
    asm "push rdi"
    asm "mov rax, 1"
    asm "mov rdi, 1"
    asm ".kprint_loop:"
    asm "    mov rsi, [rsp]"
    asm "    movzx rdx, byte [rsi]"
    asm "    test rdx, rdx"
    asm "    jz .kprint_done"
    asm "    mov rax, 1"
    asm "    mov rdi, 1"
    asm "    mov rdx, 1"
    asm "    syscall"
    asm "    inc rsi"
    asm "    mov [rsp], rsi"
    asm "    jmp .kprint_loop"
    asm ".kprint_done:"
    asm "    pop rdi"
}

~
itoc function
args:
    the ASCII integer (stored in rdi)
usage exmaple:
    itoc(65) % 'A'
~
fn itoc() {
    asm "sub rsp, 8"  
    asm "mov byte [rsp], dil"
    asm "lea rax, [rsp]"
    asm "add rsp, 8"  
}

~
printascii function
args:
    the ASCII integer (stored in rdi)
usage example:
    printascii(65) % prints A
~
fn printascii() {
    asm "push rdi"
    asm "mov rax, 1"
    asm "mov rdi, 1"
    asm "lea rsi, [rsp]"
    asm "mov rdx, 1"
    asm "syscall"
    asm "pop rdi"
}

~
printi function
args:
    the integer (stored in rdi)
usage example:
    printi(10) % prints 10
~
fn printi() {
    asm "mov rbp, 0"
    asm ".convert_loop:"
    asm "mov rax, rdi"
    asm "mov rbx, 10"
    asm "xor rdx, rdx"
    asm "div rbx"
    asm "push rdx"
    asm "inc rbp"
    asm "mov rdi, rax"
    asm "cmp rdi, 0"
    asm "je .convert_loop_end"
    asm "jmp .convert_loop"
    asm ".convert_loop_end:"
    asm ".print_loop:"
    asm "pop rdi"
    asm "add rdi, '0'"
    asm "call printascii"
    asm "dec rbp"
    asm "test rbp, rbp"
    asm "jz .print_end"
    asm "jmp .print_loop"
    asm ".print_end:"
}

~
readc function
args:
    none
usage example:
    readc() % first character in stdin
~
fn readc() {
    @stackszinc 1
    asm "sub rsp, 8"
    asm "mov rdi, rsp"
    asm "mov rax, 0"
    asm "mov rdi, 0"
    asm "mov rsi, rsp"
    asm "mov rdx, 1"
    asm "syscall"
    asm "movzx rax, byte [rsp]"
}
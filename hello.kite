global _start

fn _start() {
    let x = 65
    loop {
        % infinite loop
        cmp x, 66 {
            eq {
                x = x + 1
                continue
            }
        }
        kprintc(itoc(x))
        x = x + 1
        cmp x, 68 {
            eq {
                break
            }
        }
    }
	return 0
}

~
==========================
STANDARD LIBRARY FUNCTIONS
==========================
~

~
kprintc function
args:
    the character (stored in rdi)
usage example:
    kprint('V')
~
fn kprintc() {
    asm "mov rdx, 1"
    asm "mov rsi, rdi"
    asm "mov rax, 1"
    asm "mov rdi, 1"
    asm "syscall"
}
~
kprint function
args:
    the pointer to the string (stored in rdi)
usage example:
    kprint("Hello World!")
~
fn kprint() {
    asm "push rdi"
    asm "mov rax, 1"
    asm "mov rdi, 1"
    asm ".kprint_loop:"
    asm "    mov rsi, [rsp]"
    asm "    movzx rdx, byte [rsi]"
    asm "    test rdx, rdx"
    asm "    jz .kprint_done"
    asm "    mov rax, 1"
    asm "    mov rdi, 1"
    asm "    mov rdx, 1"
    asm "    syscall"
    asm "    inc rsi"
    asm "    mov [rsp], rsi"
    asm "    jmp .kprint_loop"
    asm ".kprint_done:"
    asm "    pop rdi"
}

~
itoc function
args:
    the ASCII integer (stored in rdi)
usage exmaple:
    itoc(65) % 'A'
~
fn itoc() {
    asm "sub rsp, 8"  
    asm "mov byte [rsp], dil"
    asm "lea rax, [rsp]"
    asm "add rsp, 8"  
}